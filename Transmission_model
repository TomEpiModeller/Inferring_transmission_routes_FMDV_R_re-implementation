Transmission_model<-function(N, Ndays, dt, ParTr, Ni0, E0, VP, Ti, Esize){
  #Parameters from data

Nt=Ndays/dt #Number of time steps

#Contamination parameters
beta <- ParTr[1, 1]
betaE <- ParTr[1, 2]
alpha <- ParTr[1, 3:6]
delta <- ParTr[1, 7:10]

#Initialisation
#Initialise vectors and matrices
Ni <- matrix (data = 0, nrow = Nt, ncol = 1)
V <- matrix (data = 0, nrow = N, ncol = Nt + 1)
Infectiousness<- matrix(data = 0, nrow = N, ncol = Nt+1)
State <- matrix(data = 0, nrow = N, ncol = Nt)
E <- matrix(data = 0, nrow = Nt + 1, ncol = 4)
E[1,] <- E0
State[1:Ni0, 1] <- matrix(1, nrow = 1, ncol = Ni0)
C <- matrix(data = 0, nrow = N, ncol = Nt)
InfCause <- matrix (data = 0, nrow = N, ncol = 2)
dailyI <- matrix(data = 0, nrow = Nt, ncol = 1)
NewI <- 1:Ni0
dailyI[1] <- 1
ProbE <- matrix(data = NaN, nrow = Nt, ncol = 1)
ProbD <- matrix(data = NaN, nrow = Nt, ncol = 1)

#Time loop
for (j in 1:Nt){
  #Identify and count susceptible and infected animals
  S <- as.matrix(State[which(State[,j]==0),j])
  Ns <- size(S,1)
  Infd <- as.matrix(State[which(State[,j]==1),j])
  Ni[j] <- size(Infd,1)
  State[,j+1] <- State[,j]

  #For newly infected animals, calculate their viral titre in each compartment
  #and their shedding profile from day of infection to the end of the simulation
  if (dailyI[j]>0){
    for (i in t(NewI)){
      Ti <- V_profile_list[[1]]$Ti
      V[i, (j:(Nt + 1))] <- VP[ ((i-1)*Nt + 1) : ((i-1)*Nt + Nt - j + 2)]
      if(j+ceiling(V_profile_list[[1]]$Ti[i,2]/dt)<=Nt){
      C[i,(j+ceiling(V_profile_list[[1]]$Ti[i,2]/dt)):(Nt)] <- 1
      }
    }
    #Infectiousness is assumed to be proportional to log titre
    Infectiousness[NewI,] <- pmax(0,log(V[NewI,]))
  }
  #Calculate environmental contamination - 0.56 accounts for unit conversion
  
  E[j+1,] = E[j,] - delta*dt*E[j,] + alpha*dt*sum(pmax(0,log(0.56*V[,j])))/Esize
  #New infections
  if ((Ni[[j]])<N & (j<Nt-1)){ #If there are still uninfected animals in the herd
    
    #Environmental transmission (homogenous for each type of contamination)
    ProbE[[j]] <- 1-exp(-betaE*dt*sum((E[j+1,])+E[j,])/2)
    # Remove NaN values from ProbE[[j]]
    #ProbE[[j]] <- ProbE[[j]][!is.nan(ProbE[[j]])]
    Einf <- runif(Ns) < ProbE[[j]]
    #Direct transmission
    ProbD[[j]] <- 1 - exp(-beta*dt*(mean((Infectiousness[,j+1]+Infectiousness[,j]))/2))
    Dinf <- runif(Ns) < ProbD[[j]] #Generate new infections of susceptible animals
    
    #Record the route of infection and time
    InfCause[1:size(S,1),1] <- 2*Einf+Dinf # 1=direct, 2=environmental, 3=both
    InfCause[1:length(S),2] <- j*dt
    
    State[which(State[,j]==0),j+1] <- State[which(State[,j]==0),j] + pmax(1*Einf,1*Dinf)
    NewI <- which(State[,j+1] - State[,j] == 1)
    dailyI[[j+1]] <- length(NewI)
    }else{
      break
    }
  }


dailyI <- sum(matrix(dailyI,nrow = 1/dt, ncol = Nt*dt))
TotInf <- colSums(Infectiousness)

Cs <- colSums(C[,])
if(sum(Cs) > 0){
  Cfirst <- which(Cs>=1)[1]
  }else{
  Cfirst <- NaN
  }
transmission_list<-list(E=E,Cs=Cs,Cfirst=Cfirst,Ni=Ni,TotInf=TotInf,
                        dailyI=dailyI,InfCause=InfCause,Infectiousness=Infectiousness,
                        ProbE=ProbE,ProbD=ProbD)

return(transmission_list)
}
